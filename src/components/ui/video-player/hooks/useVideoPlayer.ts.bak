import { useCallback, useEffect, useMemo, useRef, useState } from 'react';

export interface IVideoElement extends HTMLVideoElement {
	msRequestFullscreen?: () => void;
	mozRequestFullScreen?: () => void;
	webkitRequestFullscreen?: () => void;
}

export const useVideoPlayer = () => {
	const videoRef = useRef<IVideoElement>(null);

	const [isPause, setIsPause] = useState(true);
	const [isDisabledHotkey, setIsDisabledHotkey] = useState(false);
	const [currentTime, setCurrentTime] = useState(0);
	const [videoTime, setVideoTime] = useState(0);
	const [progress, setProgress] = useState(0);
	const [volume, setVolume] = useState(0.7);

	const togglePlay = useCallback(() => {
		setIsPause(!isPause);
	}, [isPause]);

	useEffect(() => {
		const originalDuration = videoRef.current?.duration;
		if (originalDuration) setVideoTime(originalDuration);
	}, [videoRef.current?.duration]);

	const toggleVideo = useCallback(() => {
		if (!isPause) {
			videoRef.current?.play();
		} else {
			videoRef.current?.pause();
		}
	}, [isPause]);

	//end of video
	useEffect(() => {
		const video = videoRef.current;
		if (videoTime !== 0 && video?.currentTime === videoTime) {
			// setIsPlaying(false);
			// videoRef.current.load();
			// videoRef.current.currentTime === 0;
			// video.pause();
			setIsPause(true);
		}
	}, [videoRef, videoTime]);

	useEffect(() => toggleVideo(), [isPause, toggleVideo]);

	useEffect(() => {
		if (videoRef.current) videoRef.current.volume = volume;
	}, [volume]);

	const forward = () => {
		if (videoRef.current) videoRef.current.currentTime += 5;
	};
	const backward = () => {
		if (videoRef.current) videoRef.current.currentTime -= 5;
	};

	const fullScreen = () => {
		const video = videoRef.current;
		if (!video) return;
		if (video.requestFullscreen) {
			video.requestFullscreen();
		} else if (video.msRequestFullscreen) {
			video.msRequestFullscreen();
		} else if (video.mozRequestFullScreen) {
			video.mozRequestFullScreen();
		} else if (video.webkitRequestFullscreen) {
			video.webkitRequestFullscreen();
		}
	};

	useEffect(() => {
		const video = videoRef.current;

		if (!video) return;

		const updateProgress = () => {
			setCurrentTime(video.currentTime);
			setProgress((video.currentTime / videoTime) * 100);
		};
		video.addEventListener('timeupdate', updateProgress);

		return () => {
			video.removeEventListener('timeupdate', updateProgress);
		};
	}, [videoTime]);

	useEffect(() => {
		const video = videoRef.current;
		if (videoTime !== 0 && video?.currentTime === videoTime) {
			// setIsPlaying(false);
			// videoRef.current.load();
			// videoRef.current.currentTime === 0;
			// video.play();
			setIsPause(true);
		}
	}, [videoRef.current?.currentTime, videoTime]);
	useEffect(() => {
		const handleKeydown = (e: KeyboardEvent) => {
			if (!isDisabledHotkey) {
				switch (e.key) {
					case 'ArrowRight':
						forward();
						break;
					case 'ArrowLeft':
						backward();
						break;
					case ' ':
						{
							e.preventDefault();
							togglePlay();
						}
						break;
					case 'f':
						fullScreen();
						break;
					default:
						return;
				}
			}
		};

		document.addEventListener('keydown', handleKeydown);
		return () => {
			document.removeEventListener('keydown', handleKeydown);
		};
	}, [isDisabledHotkey, isPause, togglePlay]);

	return useMemo(
		() => ({
			videoRef,
			actions: {
				fullScreen,
				backward,
				forward,
				toggleVideo,
				togglePlay,
				setIsDisabledHotkey,
				setVolume,
			},
			video: {
				isPause,
				currentTime,
				progress,
				videoTime,
				toggleVideo,
				volume,
			},
		}),
		[isPause, currentTime, progress, videoTime, toggleVideo, togglePlay, volume]
	);
};
